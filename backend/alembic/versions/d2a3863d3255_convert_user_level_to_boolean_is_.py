"""Convert user level to boolean is_advanced field

Revision ID: d2a3863d3255
Revises: 37d8d6b896b8
Create Date: 2025-09-06 15:15:21.694491

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd2a3863d3255'
down_revision = '37d8d6b896b8'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add the new boolean column with default False
    op.add_column('user', sa.Column('is_advanced', sa.Boolean(), nullable=False, server_default='false'))
    
    # Convert existing level data: level 1 becomes is_advanced=true, level 0 becomes is_advanced=false
    op.execute("UPDATE \"user\" SET is_advanced = CASE WHEN level = 1 THEN true ELSE false END")
    
    # Drop the old level column
    op.drop_column('user', 'level')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add back the level column with default 0
    op.add_column('user', sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=False, server_default='0'))
    
    # Convert boolean data back to integer: is_advanced=true becomes level=1, is_advanced=false becomes level=0
    op.execute("UPDATE \"user\" SET level = CASE WHEN is_advanced = true THEN 1 ELSE 0 END")
    
    # Drop the boolean column
    op.drop_column('user', 'is_advanced')
    # ### end Alembic commands ###
